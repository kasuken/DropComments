{
  "name": "dropcomments",
  "displayName": "DropComments",
  "description": "DropComments is a Visual Studio Code extension that helps you automatically add comments to your code using AI.",
  "version": "0.7.3",
  "icon": "img/DropCommentsLogo.png",
  "repository": {
    "type": "git",
    "url": "https://github.com/kasuken/DropComments.git"},
  "publisher": "emanuelebartolesi",
  "engines": {
    "vscode": "^1.103.0"
  },
  "categories": [
    "Programming Languages",
    "Snippets"
  ],
  "keywords": [
    "ai",
    "artificial-intelligence",
    "chatgpt",
    "gpt",
    "openai",
    "azure-openai",
    "llm",
    "machine-learning",
    "comments",
    "code-comments",
    "auto-comment",
    "comment-generator",
    "documentation",
    "code-documentation",
    "docstring",
    "jsdoc",
    "javadoc",
    "doxygen",
    "kdoc",
    "context-menu",
    "productivity",
    "developer-tools"
  ],
  "activationEvents": [],
  "main": "./out/extension.js",
  "contributes": {
    "commands": [
      {
        "command": "dropcomments.addComments",
        "title": "DropComments: Add Comments to Selection"
      },
      {
        "command": "dropcomments.addCommentsContext",
        "title": "Add Comments with DropComments"
      },
      {
        "command": "dropcomments.stale.scanWorkspace",
        "title": "Scan Workspace for Stale Comments",
        "icon": "$(search)"
      },
      {
        "command": "dropcomments.stale.refreshView",
        "title": "Refresh",
        "icon": "$(refresh)"
      },
      {
        "command": "dropcomments.stale.openLocation",
        "title": "Open File",
        "icon": "$(go-to-file)"
      },
      {
        "command": "dropcomments.stale.regenerate",
        "title": "Regenerate Comment",
        "icon": "$(sparkle)"
      },
      {
        "command": "dropcomments.stale.regenerateAll",
        "title": "Regenerate All Comments",
        "icon": "$(sync)"
      },
      {
        "command": "dropcomments.stale.apply",
        "title": "Apply Changes",
        "icon": "$(check)"
      },
      {
        "command": "dropcomments.stale.dismiss",
        "title": "Dismiss",
        "icon": "$(close)"
      }
    ],
    "viewsContainers": {
      "activitybar": [
        {
          "id": "dropcomments-stale",
          "title": "Stale Comments",
          "icon": "$(comment-unresolved)",
          "when": "config.dropcomments.stale.enable"
        }
      ]
    },
    "views": {
      "dropcomments-stale": [
        {
          "id": "dropcomments.staleComments",
          "name": "Stale Comments",
          "when": "config.dropcomments.stale.enable"
        }
      ]
    },
    "menus": {
      "editor/context": [
        {
          "command": "dropcomments.addCommentsContext",
          "when": "editorTextFocus && editorHasSelection",
          "group": "1_modification@7"
        }
      ],
      "view/title": [
        {
          "command": "dropcomments.stale.scanWorkspace",
          "when": "view == dropcomments.staleComments",
          "group": "navigation@1"
        },
        {
          "command": "dropcomments.stale.refreshView",
          "when": "view == dropcomments.staleComments",
          "group": "navigation@2"
        },
        {
          "command": "dropcomments.stale.regenerateAll",
          "when": "view == dropcomments.staleComments",
          "group": "navigation@3"
        }
      ],
      "view/item/context": [
        {
          "command": "dropcomments.stale.openLocation",
          "when": "view == dropcomments.staleComments && viewItem == staleComment",
          "group": "inline@1"
        },
        {
          "command": "dropcomments.stale.regenerate",
          "when": "view == dropcomments.staleComments && viewItem == staleComment",
          "group": "inline@2"
        },
        {
          "command": "dropcomments.stale.apply",
          "when": "view == dropcomments.staleComments && viewItem == staleCommentWithRegenerated",
          "group": "inline@3"
        },
        {
          "command": "dropcomments.stale.dismiss",
          "when": "view == dropcomments.staleComments && viewItem =~ /staleComment/",
          "group": "inline@4"
        }
      ]
    },
    "configuration": {
      "title": "DropComments",
      "properties": {
        "dropcomments.apiKey": {
          "type": "string",
          "default": "",
          "description": "API key used by DropComments.",
          "scope": "application"
        },
        "dropcomments.model": {
          "type": "string",
          "default": "gpt-4o-mini",
          "description": "Model to use for generating comments.",
          "scope": "application"
        },
        "dropcomments.commentStyle": {
          "type": "string",
          "enum": ["succinct", "detailed"],
          "default": "succinct",
          "description": "Style of comments to generate.",
          "scope": "application"
        }
        ,
        "dropcomments.useEmojis": {
          "type": "boolean",
          "default": false,
          "description": "Include emojis in generated comments.",
          "scope": "application"
        },
        "dropcomments.apiUrl": {
          "type": "string",
          "default": "",
          "description": "Optional base URL for the AI API (OpenAI-compatible). Leave empty to use the default OpenAI endpoint.",
          "scope": "application"
        }
        ,
        "dropcomments.promptTemplate": {
          "type": "string",
          "default": "",
          "description": "Custom prompt template for AI comment generation. Supports variables: {language}, {code}, {style}, {emojiInstruction}. Leave empty to use the default template.",
          "scope": "application"
        },
        "dropcomments.stale.enable": {
          "type": "boolean",
          "default": false,
          "description": "Enable stale comments detection and management.",
          "scope": "application"
        },
        "dropcomments.stale.autoScanOnOpen": {
          "type": "boolean",
          "default": true,
          "description": "Automatically scan for stale comments when workspace is opened (when stale feature is enabled).",
          "scope": "application"
        },
        "dropcomments.stale.maxScanFiles": {
          "type": "number",
          "default": 5000,
          "description": "Maximum number of files to scan for stale comments.",
          "scope": "application"
        },
        "dropcomments.stale.scoreThreshold": {
          "type": "number",
          "default": 55,
          "minimum": 0,
          "maximum": 100,
          "description": "Minimum staleness score to display comments (0-100).",
          "scope": "application"
        },
        "dropcomments.stale.excludeGlobs": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "default": ["**/node_modules/**", "**/dist/**", "**/build/**", "**/out/**", "**/.git/**", "**/coverage/**", "**/target/**", "**/bin/**", "**/obj/**"],
          "description": "File patterns to exclude from stale comment scanning.",
          "scope": "application"
        },
        "dropcomments.stale.batchConcurrency": {
          "type": "number",
          "default": 3,
          "minimum": 1,
          "maximum": 10,
          "description": "Number of concurrent AI requests for batch regeneration.",
          "scope": "application"
        },
        "dropcomments.stale.commentOnlyRegeneration": {
          "type": "boolean",
          "default": true,
          "description": "When regenerating, only update the comment text (not the surrounding code).",
          "scope": "application"
        },
        "dropcomments.stale.showLowConfidence": {
          "type": "boolean",
          "default": false,
          "description": "Show items with scores within 10 points below the threshold.",
          "scope": "application"
        },
        "dropcomments.stale.gitHistoryDepth": {
          "type": "number",
          "default": 20,
          "minimum": 1,
          "maximum": 100,
          "description": "Maximum number of git blame traversals for age heuristics.",
          "scope": "application"
        }
      }
    }
  },
  "scripts": {
    "vscode:prepublish": "npm run compile",
    "compile": "tsc -p ./",
    "watch": "tsc -watch -p ./",
    "pretest": "npm run compile && npm run lint",
    "lint": "eslint src",
    "test": "vscode-test"
  },
  "dependencies": {
    "openai": "^4.67.3"
  },
  "devDependencies": {
    "@types/vscode": "^1.103.0",
    "@types/mocha": "^10.0.10",
    "@types/node": "22.x",
    "@typescript-eslint/eslint-plugin": "^8.39.0",
    "@typescript-eslint/parser": "^8.39.0",
    "eslint": "^9.32.0",
    "typescript": "^5.9.2",
    "@vscode/test-cli": "^0.0.11",
    "@vscode/test-electron": "^2.5.2"
  }
}
